(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{423:function(t,s,a){"use strict";a.r(s);var e=a(55),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#概念"}},[t._v("概念")])]),a("li",[a("a",{attrs:{href:"#方法"}},[t._v("方法")])]),a("li",[a("a",{attrs:{href:"#应用场景"}},[t._v("应用场景")]),a("ul",[a("li",[a("a",{attrs:{href:"#区别"}},[t._v("区别")])])])]),a("li",[a("a",{attrs:{href:"#参数格式"}},[t._v("参数格式")])]),a("li",[a("a",{attrs:{href:"#默认遍历器接口"}},[t._v("默认遍历器接口")])]),a("li",[a("a",{attrs:{href:"#总结"}},[t._v("总结")])]),a("li",[a("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),t._v("\n​"),a("p"),t._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v(" 对象是值的集合，你可以按照插入的顺序迭代它的元素。 "),a("code",[t._v("Set")]),t._v("中的元素只会出现一次，即 "),a("code",[t._v("Set")]),t._v(" 中的元素是唯一的。")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v(" 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。")]),t._v(" "),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("set方法")])]),t._v(" "),a("ol",[a("li",[t._v("add()：添加值，返回实例")]),t._v(" "),a("li",[t._v("delete()：删除值，返回布尔")]),t._v(" "),a("li",[t._v("has()：检查值，返回布尔")]),t._v(" "),a("li",[t._v("clear()：清除所有成员")]),t._v(" "),a("li",[t._v("keys()：返回以属性值为遍历器的对象")]),t._v(" "),a("li",[t._v("values()：返回以属性值为遍历器的对象")]),t._v(" "),a("li",[t._v("entries()：返回以属性值和属性值为遍历器的对象")]),t._v(" "),a("li",[t._v("forEach()：使用回调函数遍历每个成员")]),t._v(" "),a("li")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("map方法")])]),t._v(" "),a("ol",[a("li",[t._v("get(): 返回键值对")]),t._v(" "),a("li",[t._v("set(): 添加键值对")]),t._v(" "),a("li",[t._v("delete(): 删除键值对，返回布尔值")]),t._v(" "),a("li",[t._v("has(): 检查键值对，返回布尔值")]),t._v(" "),a("li",[t._v("clear(): 清除所有成员")]),t._v(" "),a("li",[t._v("keys()：返回以键为遍历器的对象")]),t._v(" "),a("li",[t._v("values()：返回以值为遍历器的对象")]),t._v(" "),a("li",[t._v("entries()：返回以键和值为遍历器的对象")]),t._v(" "),a("li",[t._v("forEach()：使用回调函数遍历每个成员")])]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("set应用场景")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("set用于数据重组，是一种称为集合的数据结构。")])]),t._v(" "),a("li",[a("p",[t._v('去重字符串：[...new Set(str)].join("")')])]),t._v(" "),a("li",[a("p",[t._v("去重数组：[...new Set(arr)]或Array.from(new Set(arr))")])]),t._v(" "),a("li",[a("p",[t._v("集合数组")]),t._v(" "),a("ul",[a("li",[t._v("声明：const a = new Set(arr1)、const b = new Set(arr2)")]),t._v(" "),a("li",[t._v("并集：new Set([...a, ...b])")]),t._v(" "),a("li",[t._v("交集：new Set([...a].filter(v => b.has(v)))")]),t._v(" "),a("li",[t._v("差集：new Set([...a].filter(v => !b.has(v)))")])])]),t._v(" "),a("li",[a("p",[t._v("映射集合")]),t._v(" "),a("ul",[a("li",[t._v("声明：let set = new Set(arr)")]),t._v(" "),a("li",[t._v("映射：set = new Set([...set].map(v => v * 2))或set = new Set(Array.from(set, v => v * 2))")])])]),t._v(" "),a("li",[a("p",[t._v("难点")]),t._v(" "),a("ul",[a("li",[t._v("遍历顺序：插入顺序")]),t._v(" "),a("li",[t._v("没有键只有值，可认为键和值两值相等")]),t._v(" "),a("li",[t._v("添加多个NaN时，只会存在一个NaN")]),t._v(" "),a("li",[t._v("添加相同的对象时，会认为是不同的对象")]),t._v(" "),a("li",[t._v('添加值时不会发生类型转换(5 !== "5")')]),t._v(" "),a("li",[t._v("keys()和values()的行为完全一致，entries()返回的遍历器同时包括键和值且两值相等")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("map应用场景")])]),t._v(" "),a("ul",[a("li",[t._v("map用于数据存储、映射，是一种称为字典的数据结构。")]),t._v(" "),a("li",[t._v("难点\n"),a("ul",[a("li",[t._v("遍历顺序：插入顺序")]),t._v(" "),a("li",[t._v("对同一个键多次赋值，后面的值将覆盖前面的值")]),t._v(" "),a("li",[t._v("对同一个对象的引用，被视为一个键")]),t._v(" "),a("li",[t._v("对同样值的两个实例，被视为两个键")]),t._v(" "),a("li",[t._v("键跟内存地址绑定，只要内存地址不一样就视为两个键")]),t._v(" "),a("li",[t._v("添加多个以NaN作为键时，只会存在一个以NaN作为键的值")]),t._v(" "),a("li",[t._v("Object结构提供字符串—值的对应，Map结构提供值—值的对应")])])])]),t._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("共同点")]),t._v(": 集合、字典 可以储存不重复的值")]),t._v(" "),a("li",[a("strong",[t._v("不同点")]),t._v(": 集合以 "),a("code",[t._v("[value,value]")]),t._v("的形式存储元素。而字典以 "),a("code",[t._v("[key,value]")]),t._v("形式存储元素。")])]),t._v(" "),a("h2",{attrs:{id:"参数格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数格式"}},[t._v("#")]),t._v(" 参数格式")]),t._v(" "),a("p",[t._v("初始化map时，需要传入一个"),a("strong",[t._v("二维数组")]),t._v("。\n初始化set时，需要传入"),a("strong",[t._v("一维数组")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" singleArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doubleArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doubleArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2,3,4,5,6];")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [["a",1],["b",2]];')]),t._v("\n")])])]),a("h2",{attrs:{id:"默认遍历器接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认遍历器接口"}},[t._v("#")]),t._v(" 默认遍历器接口")]),t._v(" "),a("p",[t._v("set和map都有默认的遍历器接口。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("共同点")]),t._v(":   当直接输出set和map时，就调用了这个接口（"),a("code",[t._v("Symbol.iterator")]),t._v("属性）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("不同点")]),t._v("：因为它们的"),a("strong",[t._v("数据结构")]),t._v("不同，因此遍历器接口所调用的"),a("strong",[t._v("对应方法")]),t._v("不同。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("entries\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ol",[a("li",[t._v("set和map"),a("strong",[t._v("所需参数")]),t._v("不同，set需要传入"),a("strong",[t._v("一维数组")]),t._v(",map需要传入"),a("strong",[t._v("二维数组")])]),t._v(" "),a("li",[t._v("set和map的每个"),a("strong",[t._v("数据元素结构")]),t._v("不同。set没有键值对的概念，它的键也是他的值，即"),a("code",[t._v("[value,value]")]),t._v("。而map有键值对的概念，即"),a("code",[t._v("[key,value]")])]),t._v(" "),a("li",[t._v("set和map的默认遍历器接口对应的方法不同。\n"),a("ul",[a("li",[t._v("set对应原型中的"),a("code",[t._v("Set.prototype.values()")]),t._v("方法")]),t._v(" "),a("li",[t._v("map对应原型中的"),a("code",[t._v("Map.prototype.entries()")]),t._v("方法")])])]),t._v(" "),a("li",[t._v("Map的"),a("strong",[t._v("键")]),t._v("是"),a("strong",[t._v("不能修改")]),t._v("的，但是键"),a("strong",[t._v("对应的值")]),t._v("是"),a("strong",[t._v("可以修改")]),t._v("的；Set不能通过迭代器来改变Set的值，因为set中键就是值。")]),t._v(" "),a("li",[t._v("所有的元素都会被自动排序")])]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7064479924757168165#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("js 中 Map 和 Set 的用法以及区别 - 掘金 (juejin.cn)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);